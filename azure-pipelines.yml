# Maven
# Build your Java project and run tests with Apache Maven.
# Add steps that analyze code, save build artifacts, deploy, and more:
# https://docs.microsoft.com/azure/devops/pipelines/languages/java

trigger:
- main

pool:
  vmImage: ubuntu-latest

stages:
- stage: Build
  displayName: Build stage
  jobs:
  - job: Build
    container: maven:3.8.1-openjdk-17-slim
    displayName: Build Maven Project
    steps:
    - task: Maven@3
      inputs:
        mavenPomFile: 'pom.xml'
        mavenOptions: '-Xmx3072m'
        javaHomeSelection: 'path'
        jdkDirectory: '/usr/local/openjdk-17'
        publishJUnitResults: true
        testResultsFiles: '**/surefire-reports/TEST-*.xml'
        goals: 'package'
    - task: CopyFiles@2
      displayName: 'Copy Files to artifact staging directory'
      inputs:
        SourceFolder: '$(System.DefaultWorkingDirectory)'
        Contents: '**/target/*.?(war|jar)'
        TargetFolder: $(Build.ArtifactStagingDirectory)
    - upload: $(Build.ArtifactStagingDirectory)
      artifact: drop
- stage: Deploy
  displayName: Deploy App
  dependsOn: Build
  jobs:      
  - deployment: VMDeploy
    displayName: web
    environment:
      name: test
      resourceType: VirtualMachine
    strategy:
        rolling:
          maxParallel: 2  #for percentages, mention as x%
          preDeploy:
            steps:
            - download: current
              artifact: drop
            - script: echo initialize, cleanup, backup, install certs
          deploy:
            steps:
            - task: Bash@3
              inputs:
                targetType: 'inline'
                script: |
                  # Modify deployment script based on the app type
                  echo "Starting deployment script run"
                  sudo ls -a '$(Pipeline.Workspace)'
                  sudo ls -a '$(Pipeline.Workspace)/drop'
                  sudo ls -a '$(Pipeline.Workspace)/drop/target'
                  sudo java -jar '$(Pipeline.Workspace)/drop/target/postgresql-0.0.1-SNAPSHOT.jar'
          routeTraffic:
            steps:
            - script: echo routing traffic
          postRouteTraffic:
            steps:
            - script: echo health check post-route traffic
          on:
            failure:
              steps:
              - script: echo Restore from backup! This is on failure
            success:
              steps:
              - script: echo Notify! This is on success